(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{163:function(t,e,a){t.exports=a.p+"assets/img/getting-started-result-example.7820ee84.jpg"},467:function(t,e,a){"use strict";a.r(e);var n=a(4),s=Object(n.a)({},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"python-client"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#python-client"}},[t._v("#")]),t._v(" Python Client")]),t._v(" "),n("p",[t._v("This Getting Started guide will give you just a simple overview of the capabilities of the openEO Python client library.\nMore in-depth information can be found in its "),n("a",{attrs:{href:"https://open-eo.github.io/openeo-python-client/",target:"_blank",rel:"noopener noreferrer"}},[t._v("official documentation"),n("OutboundLink")],1),t._v(".")]),t._v(" "),n("h2",{attrs:{id:"installation"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#installation"}},[t._v("#")]),t._v(" Installation")]),t._v(" "),n("p",[t._v("The openEO Python client library is available on "),n("a",{attrs:{href:"https://pypi.org/project/openeo/",target:"_blank",rel:"noopener noreferrer"}},[t._v("PyPI"),n("OutboundLink")],1),t._v("\nand can easily be installed with a tool like "),n("code",[t._v("pip")]),t._v(", for example:")]),t._v(" "),n("div",{staticClass:"language-shell script extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[t._v("pip "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" openeo\n")])])]),n("p",[t._v("It's recommended to work in a virtual environment of some kind ("),n("code",[t._v("venv")]),t._v(", "),n("code",[t._v("conda")]),t._v(", ...),\ncontaining Python 3.6 or higher.")]),t._v(" "),n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),n("p",[t._v("For more details, alternative installation procedures or troubleshooting tips:\nsee the "),n("a",{attrs:{href:"https://open-eo.github.io/openeo-python-client/installation.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("official "),n("code",[t._v("openeo")]),t._v(" package installation documentation"),n("OutboundLink")],1),t._v(".")])]),t._v(" "),n("h2",{attrs:{id:"exploring-a-back-end"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#exploring-a-back-end"}},[t._v("#")]),t._v(" Exploring a back-end")]),t._v(" "),n("p",[t._v("If you do not know an openEO back-end that you want to connect to yet, you can have a look at the "),n("a",{attrs:{href:"https://hub.openeo.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("openEO Hub"),n("OutboundLink")],1),t._v(", to find all known back-ends with information on their capabilities.")]),t._v(" "),n("p",[t._v("For this tutorial we will use the openEO instance of Google Earth Engine, which is available at "),n("code",[t._v("https://earthengine.openeo.org")]),t._v(".\nNote that the code snippets in this guide work the same way for the other back-ends listed in the openEO Hub. Just the collection identifier and band names might differ.")]),t._v(" "),n("p",[t._v("First we need to establish a connection to the back-end.")]),t._v(" "),n("div",{staticClass:"language-python extra-class"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" openeo\n\nconnection "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" openeo"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("connect"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"https://earthengine.openeo.org"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),n("p",[t._v("The "),n("a",{attrs:{href:"https://open-eo.github.io/openeo-python-client/api.html#module-openeo.rest.connection",target:"_blank",rel:"noopener noreferrer"}},[n("code",[t._v("Connection")]),t._v(" object"),n("OutboundLink")],1),t._v("\nis your central gateway to")]),t._v(" "),n("ul",[n("li",[t._v("list data collections, available processes, file formats and other capabilities of the back-end")]),t._v(" "),n("li",[t._v("start building your openEO algorithm from the desired data on the back-end")]),t._v(" "),n("li",[t._v("execute and monitor (batch) jobs on the back-end")]),t._v(" "),n("li",[t._v("etc.")])]),t._v(" "),n("h3",{attrs:{id:"collections"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#collections"}},[t._v("#")]),t._v(" Collections")]),t._v(" "),n("p",[t._v('The EO data available at a back-end is organised in so-called collections.\nFor example, a back-end might provide fundamental satellite collections like "Sentinel 1" or "Sentinel 2",\nor preprocessed collections like "NDVI".\nCollections are used as input data for your openEO jobs.')]),t._v(" "),n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"custom-block-title"},[t._v("Note")]),t._v(" "),n("p",[t._v('More information on how openEO "collections" relate to terminology used in other systems can be found in\n('),n("RouterLink",{attrs:{to:"/documentation/1.0/glossary.html#eo-data-collections"}},[t._v("the openEO glossary")]),t._v(").")],1)]),t._v(" "),n("p",[t._v("Let's list all available collections on the back-end,\nusing "),n("a",{attrs:{href:"https://open-eo.github.io/openeo-python-client/api.html#openeo.rest.connection.Connection.list_collections",target:"_blank",rel:"noopener noreferrer"}},[n("code",[t._v("list_collections")]),n("OutboundLink")],1),t._v(":")]),t._v(" "),n("div",{staticClass:"language-python extra-class"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("connection"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("list_collections"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),n("p",[t._v("which returns list of collection metadata dictionaries, e.g. something like:")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("[{'id': 'AGERA5', 'title': 'ECMWF AGERA5 meteo dataset', 'description': 'Daily surface meteorolociga datal ...', ...},\n {'id': 'SENTINEL2_L2A_SENTINELHUB', 'title': 'Sentinel-2 top of canopy', ...},\n {'id': 'SENTINEL1_GRD', ...},\n ...]\n")])])]),n("p",[t._v("This listing includes basic metadata for each collection.\nIf necessary, a more detailed metadata listing for a given collection can be obtained with\n"),n("a",{attrs:{href:"https://open-eo.github.io/openeo-python-client/api.html#openeo.rest.connection.Connection.describe_collection",target:"_blank",rel:"noopener noreferrer"}},[n("code",[t._v("describe_collection")]),n("OutboundLink")],1),t._v(".")]),t._v(" "),n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),n("p",[t._v("Programmatically listing collections is just a very simple usage example of the Python client.\nIn reality, you probably want to look up or inspect available collections in a web based overview such as the "),n("a",{attrs:{href:"https://hub.openeo.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("openEO Hub"),n("OutboundLink")],1),t._v(".")])]),t._v(" "),n("h3",{attrs:{id:"processes"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#processes"}},[t._v("#")]),t._v(" Processes")]),t._v(" "),n("p",[t._v('Processes in openEO are operations that can be applied on (EO) data\n(e.g. calculate the mean of an array, or mask out observations outside a given polygon).\nThe output of one process can be used as the input of another process,\nand by doing so, multiple processes can be connected that way in a larger "process graph":\na new (user-defined) processes that implements a certain algorithm.')]),t._v(" "),n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"custom-block-title"},[t._v("Note")]),t._v(" "),n("p",[t._v("Check "),n("RouterLink",{attrs:{to:"/documentation/1.0/glossary.html#processes"}},[t._v("the openEO glossary")]),t._v("\nfor more details on pre-defined, user-defined processes and process graphs.")],1)]),t._v(" "),n("p",[t._v("Let's list the (pre-defined) processes available on the back-end\nwith "),n("a",{attrs:{href:"https://open-eo.github.io/openeo-python-client/api.html#openeo.rest.connection.Connection.list_processes",target:"_blank",rel:"noopener noreferrer"}},[n("code",[t._v("list_processes")]),n("OutboundLink")],1),t._v(":")]),t._v(" "),n("div",{staticClass:"language-python extra-class"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("connection"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("list_processes"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),n("p",[t._v("which returns a list of dictionaries describing the process (including expected arguments and return type), e.g.:")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("[{'id': 'absolute', 'summary': 'Absolute value', 'description': 'Computes the absolute value of a real number `x`, which is th...', \n {'id': 'mean', 'summary': 'Arithmetic mean(average)', ...}\n ...]\n")])])]),n("p",[t._v("Like with collections, instead of programmatic exploration you'll probably prefer a web-based overview such as the "),n("a",{attrs:{href:"https://hub.openeo.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("openEO Hub"),n("OutboundLink")],1),t._v(" for back-end specific process descriptions\nor browse the "),n("a",{attrs:{href:"https://processes.openeo.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("reference specifications of openEO processes"),n("OutboundLink")],1),t._v(".")]),t._v(" "),n("h2",{attrs:{id:"authentication"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#authentication"}},[t._v("#")]),t._v(" Authentication")]),t._v(" "),n("p",[t._v("In the code snippets above we did not need to log in\nsince we just queried publicly available back-end information.\nHowever, to run non-trivial processing queries one has to authenticate\nso that permissions, resource usage, etc. can be managed properly.")]),t._v(" "),n("p",[t._v("Depending on the back-end, there might be two different approaches to authenticate.\nYou need to inform yourself at your back-end provider of choice, which authentication approach you have to carry out.\nYou can also have a look at the "),n("a",{attrs:{href:"https://hub.openeo.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("openEO Hub"),n("OutboundLink")],1),t._v(" to see the available authentication types of the back-ends.\nFor Google Earth Engine, only "),n("a",{attrs:{href:"#basic-authentication"}},[t._v("Basic Authentication")]),t._v(" is supported at the moment.")]),t._v(" "),n("p",[t._v("A detailed description of why and how to use the authentication methods is on the "),n("a",{attrs:{href:"https://open-eo.github.io/openeo-python-client/auth.html#authentication-and-account-management",target:"_blank",rel:"noopener noreferrer"}},[t._v("official documentation"),n("OutboundLink")],1),t._v(".")]),t._v(" "),n("h3",{attrs:{id:"openid-connect-authentication"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#openid-connect-authentication"}},[t._v("#")]),t._v(" OpenID Connect Authentication")]),t._v(" "),n("p",[t._v("The OIDC ("),n("a",{attrs:{href:"https://openid.net/connect/",target:"_blank",rel:"noopener noreferrer"}},[t._v("OpenID Connect"),n("OutboundLink")],1),t._v(") authentication can be used to authenticate via an external service given a client ID.\nThe following code snippet shows how to log in via OIDC authentication:")]),t._v(" "),n("div",{staticClass:"language-python extra-class"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Authenticate with OIDC authentication"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nconnection"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("authenticate_OIDC"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Client ID"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),n("p",[t._v("Calling this method opens your system web browser, with which you can authenticate yourself on the back-end authentication system.\nAfter that the website will give you the instructions to go back to the python client, where your connection has logged your account in.\nThis means that every call that comes after that via the connection variable is executed by your user account.")]),t._v(" "),n("h3",{attrs:{id:"basic-authentication"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#basic-authentication"}},[t._v("#")]),t._v(" Basic Authentication")]),t._v(" "),n("p",[t._v("The Basic authentication method is a common way of authenticate HTTP requests given username and password.")]),t._v(" "),n("div",{staticClass:"custom-block warning"},[n("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),n("p",[t._v("The preferred authentication method is OpenID Connect due to better security mechanisms implemented in the OpenID Connect protocol.\nIf possible, use OpenID Connect instead of HTTP Basic authentication.")])]),t._v(" "),n("p",[t._v("The following code snippet shows how to log in via Basic authentication:")]),t._v(" "),n("div",{staticClass:"language-python extra-class"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Authenticate with Basic authentication"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nconnection"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("authenticate_basic"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"username"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"password"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),n("p",[t._v("After successfully calling the "),n("a",{attrs:{href:"https://open-eo.github.io/openeo-python-client/api.html#openeo.rest.connection.Connection.authenticate_basic",target:"_blank",rel:"noopener noreferrer"}},[n("code",[t._v("authenticate_basic")]),n("OutboundLink")],1),t._v(" method, you are logged into the back-end with your account.")]),t._v(" "),n("p",[t._v("This means, that every call that comes after that via the connection variable is executed by your user account.")]),t._v(" "),n("h2",{attrs:{id:"working-with-datacube"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#working-with-datacube"}},[t._v("#")]),t._v(" Working with Datacube")]),t._v(" "),n("p",[t._v("Now that we know how to discover the capabilities of the back-end and how to authenticate,\nlet's do some real work and process some EO data in a batch job.\nWe'll build the desired algorithm by working on so-called \"Datacubes\",\nwhich is the central concept in openEO to represent EO data,\nas "),n("RouterLink",{attrs:{to:"/documentation/1.0/datacubes.html"}},[t._v("discussed in great detail here")]),t._v(".")],1),t._v(" "),n("h3",{attrs:{id:"creating-a-datacube"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#creating-a-datacube"}},[t._v("#")]),t._v(" Creating a Datacube")]),t._v(" "),n("p",[t._v("The first step is loading the desired slice of a data collection\nwith "),n("a",{attrs:{href:"https://open-eo.github.io/openeo-python-client/api.html#openeo.rest.connection.Connection.load_collection",target:"_blank",rel:"noopener noreferrer"}},[n("code",[t._v("Connection.load_collection")]),n("OutboundLink")],1),t._v(":")]),t._v(" "),n("div",{staticClass:"language-python extra-class"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[t._v("datacube "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" connection"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("load_collection"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"SENTINEL1_GRD"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  spatial_extent"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"west"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("16.06")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"south"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("48.06")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"east"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("16.65")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"north"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("48.35")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  temporal_extent"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"2017-03-01"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"2017-04-01"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  bands"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"VV"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"VH"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),n("p",[t._v("This results in a "),n("a",{attrs:{href:"https://open-eo.github.io/openeo-python-client/api.html#openeo.rest.datacube.DataCube",target:"_blank",rel:"noopener noreferrer"}},[n("code",[t._v("Datacube")]),t._v(" object"),n("OutboundLink")],1),t._v('\ncontaining the "SENTINEL1_GRD" data restricted to the given spatial extent,\nthe given temporal extend and the given bands .')]),t._v(" "),n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),n("p",[t._v("You can also filter the datacube step by step or at a later stage by using the following filter methods:")]),t._v(" "),n("div",{staticClass:"language-python extra-class"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[t._v("datacube "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" datacube"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("filter_bbox"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("west"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("16.06")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" south"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("48.06")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" east"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("16.65")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" north"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("48.35")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ndatacube "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" datacube"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("filter_temporal"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("start_date"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"2017-03-01"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" end_date"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"2017-04-01"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ndatacube "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" datacube"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("filter_bands"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"VV"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"VH"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),n("p",[t._v("Still, it is recommended to always use the filters directly in "),n("a",{attrs:{href:"https://open-eo.github.io/openeo-python-client/api.html#openeo.rest.connection.Connection.load_collection",target:"_blank",rel:"noopener noreferrer"}},[t._v("load_collection"),n("OutboundLink")],1),t._v("\nto avoid loading too much data upfront.")])]),t._v(" "),n("h3",{attrs:{id:"applying-processes"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#applying-processes"}},[t._v("#")]),t._v(" Applying processes")]),t._v(" "),n("p",[t._v("By applying an openEO process on a datacube, we create a new datacube object that represents the manipulated data.\nThe standard way to do this with the Python client is to call the appropriate "),n("a",{attrs:{href:"https://open-eo.github.io/openeo-python-client/api.html#openeo.rest.datacube.DataCube",target:"_blank",rel:"noopener noreferrer"}},[n("code",[t._v("Datacube")]),t._v(" object"),n("OutboundLink")],1),t._v(" method.\nThe most common or popular openEO processes have a dedicated "),n("code",[t._v("Datacube")]),t._v(" method (e.g. "),n("code",[t._v("mask")]),t._v(", "),n("code",[t._v("aggregate_spatial")]),t._v(", "),n("code",[t._v("filter_bbox")]),t._v(", ...).\nOther processes without a dedicated method can still be applied in a generic way.\nAn on top of that, there are also some convenience methods that implement\nopenEO processes is a compact, Pythonic interface.")]),t._v(" "),n("p",[t._v("For example, the "),n("a",{attrs:{href:"https://open-eo.github.io/openeo-python-client/api.html#openeo.rest.datacube.DataCube.min_time",target:"_blank",rel:"noopener noreferrer"}},[n("code",[t._v("min_time")]),n("OutboundLink")],1),t._v(" method\nimplements a "),n("code",[t._v("reduce_dimension")]),t._v(" process along the temporal dimension, using the "),n("code",[t._v("min")]),t._v(" process as reducer function:")]),t._v(" "),n("div",{staticClass:"language-python extra-class"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[t._v("datacube "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" datacube"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("min_time"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),n("p",[t._v("This creates a new datacube (we overwrite the existing variable),\nwhere the time dimension is eliminated and for each pixel we just have\nthe minimum value of the corresponding timeseries in the original datacube.")]),t._v(" "),n("p",[t._v("See the "),n("a",{attrs:{href:"https://open-eo.github.io/openeo-python-client/api.html#openeo.rest.datacube.DataCube",target:"_blank",rel:"noopener noreferrer"}},[t._v("Python client "),n("code",[t._v("Datacube")]),t._v(" API"),n("OutboundLink")],1),t._v(" for a more complete listing of methods that implement openEO processes.")]),t._v(" "),n("p",[t._v("openEO processes that are not supported by a dedicated "),n("code",[t._v("Datacube")]),t._v(" method\ncan be applied in a generic way with the "),n("a",{attrs:{href:"https://open-eo.github.io/openeo-python-client/api.html#openeo.rest.datacube.DataCube.process",target:"_blank",rel:"noopener noreferrer"}},[n("code",[t._v("process")]),t._v(" method"),n("OutboundLink")],1),t._v(", e.g.:")]),t._v(" "),n("div",{staticClass:"language-python extra-class"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[t._v("datacube "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" datacube"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("process"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    process_id"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ndvi"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \n    arguments"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"data"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" datacube"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \n        "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"nir"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"B8"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \n        "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"red"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"B4"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),n("p",[t._v("This applies the "),n("a",{attrs:{href:"https://docs.openeo.cloud/processes/#ndvi",target:"_blank",rel:"noopener noreferrer"}},[n("code",[t._v("ndvi")]),t._v(" process"),n("OutboundLink")],1),t._v(' to the datacube with the arguments of "data", "nir" and "red" (This example assumes a datacube with bands '),n("code",[t._v("B8")]),t._v(" and "),n("code",[t._v("B4")]),t._v(").")]),t._v(" "),n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"custom-block-title"},[t._v("Note")]),t._v(" "),n("p",[t._v("Still unsure on how to make use of processes with the Python client?\nVisit the "),n("a",{attrs:{href:"https://open-eo.github.io/openeo-python-client/processes.html#working-with-processes",target:"_blank",rel:"noopener noreferrer"}},[t._v("official documentation on working with processes"),n("OutboundLink")],1),t._v(".")])]),t._v(" "),n("h3",{attrs:{id:"defining-output-format"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#defining-output-format"}},[t._v("#")]),t._v(" Defining output format")]),t._v(" "),n("p",[t._v("After applying all processes you want to execute, we need to tell the back-end to export the datacube, for example as GeoTiff:")]),t._v(" "),n("div",{staticClass:"language-python extra-class"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[t._v("result "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" datacube"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("save_result"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"GTiff"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),n("h2",{attrs:{id:"execution"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#execution"}},[t._v("#")]),t._v(" Execution")]),t._v(" "),n("p",[t._v("It's important to note that all the datacube processes we applied up to this point\nare not actually executed yet, neither locally nor remotely on the back-end.\nWe just built an abstract representation of the algorithm (input data and processing chain),\nencapsulated in a local "),n("code",[t._v("Datacube")]),t._v(" object (e.g. the "),n("code",[t._v("result")]),t._v(" variable above).\nTo trigger an actual execution (on the back-end) we have to explicitly send this representation\nto the back-end.")]),t._v(" "),n("p",[t._v("openEO defines "),n("RouterLink",{attrs:{to:"/documentation/1.0/glossary.html#data-processing-modes"}},[t._v("several processing modes")]),t._v(",\nbut for this introduction we'll focus on batch jobs, which is a good default choice.")],1),t._v(" "),n("h3",{attrs:{id:"batch-job-execution"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#batch-job-execution"}},[t._v("#")]),t._v(" Batch job execution")]),t._v(" "),n("p",[t._v("The "),n("code",[t._v("result")]),t._v(" datacube object we built above describes the desired input collections, processing steps and output format.\nWe can now just send this description to the back-end to create a batch job with the "),n("a",{attrs:{href:"https://open-eo.github.io/openeo-python-client/api.html#openeo.rest.datacube.DataCube.send_job",target:"_blank",rel:"noopener noreferrer"}},[n("code",[t._v("send_job")]),t._v(" method"),n("OutboundLink")],1),t._v(" like this:")]),t._v(" "),n("div",{staticClass:"language-python extra-class"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Creating a new job at the back-end by sending the datacube information.")]),t._v("\njob "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" result"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("send_job"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),n("p",[t._v("The batch job, which is referenced by the returned "),n("code",[t._v("job")]),t._v(" object, is just created at the back-end,\nit is not started yet.\nTo start the job and let your Python script wait until the job has finished then\ndownload it automatically, you can use the "),n("code",[t._v("start_and_wait")]),t._v(" method.")]),t._v(" "),n("div",{staticClass:"language-python extra-class"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Starts the job and waits until it finished to download the result.")]),t._v("\njob"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("start_and_wait"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\njob"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("get_results"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("download_files"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"output"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),n("p",[t._v('When everything completes successfully, the processing result will be downloaded as a GeoTIFF file\nin a folder "output".')]),t._v(" "),n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),n("p",[t._v("The official openEO Python Client documentation has more information\non "),n("a",{attrs:{href:"https://open-eo.github.io/openeo-python-client/basics.html#managing-jobs-in-openeo",target:"_blank",rel:"noopener noreferrer"}},[t._v("batch job basics"),n("OutboundLink")],1),t._v("\nor "),n("a",{attrs:{href:"https://open-eo.github.io/openeo-python-client/batch_jobs.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("more detailed batch job (result) management"),n("OutboundLink")],1)])]),t._v(" "),n("h2",{attrs:{id:"full-example"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#full-example"}},[t._v("#")]),t._v(" Full Example")]),t._v(" "),n("p",[t._v("In this chapter we will show a full example of an earth observation use case using the Python client and the Google Earth Engine back-end.")]),t._v(" "),n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"custom-block-title"},[t._v("Use Case")]),t._v(" "),n("p",[t._v("We want to produce a monthly RGB composite of Sentinel 1 backscatter data over the area of Vienna, Austria for three\nmonths in 2017. This can be used for classification and crop monitoring.")])]),t._v(" "),n("p",[t._v("In the following code example, we use inline code comments to describe what we are doing.")]),t._v(" "),n("div",{staticClass:"custom-block warning"},[n("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),n("p",[t._v("The username and password in the example above work at the time of writing, but may be invalid at the time you read this. Please "),n("RouterLink",{attrs:{to:"/contact.html"}},[t._v("contact us")]),t._v(" for credentials.")],1)]),t._v(" "),n("div",{staticClass:"language-python extra-class"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" openeo\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# First, we connect to the back-end and authenticate ourselves via Basic authentication. ")]),t._v("\ncon "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" openeo"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("connect"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"https://earthengine.openeo.org"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ncon"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("authenticate_basic"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"group11"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"test123"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Now that we are connected, we can initialize our datacube object with the area around Vienna ")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# and the time range of interest using Sentinel 1 data.")]),t._v("\ndatacube "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" con"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("load_collection"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"COPERNICUS/S1_GRD"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                               spatial_extent"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"west"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("16.06")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"south"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("48.06")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"east"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("16.65")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"north"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("48.35")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                               temporal_extent"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"2017-03-01"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"2017-06-01"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                               bands"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"VV"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Since we are creating a monthly RGB composite, we need three (R, G and B) separated time ranges.")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Therefore, we split the datacube into three datacubes by filtering temporal for March, April and May. ")]),t._v("\nmarch "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" datacube"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("filter_temporal"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"2017-03-01"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"2017-04-01"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\napril "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" datacube"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("filter_temporal"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"2017-04-01"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"2017-05-01"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nmay "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" datacube"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("filter_temporal"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"2017-05-01"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"2017-06-01"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Now that we split it into the correct time range, we have to aggregate the timeseries values into a single image.")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Therefore, we make use of the Python Client function `mean_time`, which reduces the time dimension, ")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# by taking for every timeseries the mean value.")]),t._v("\n\nmean_march "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" march"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("mean_time"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nmean_april "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" april"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("mean_time"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nmean_may "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" may"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("mean_time"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Now the three images will be combined into the temporal composite. ")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Before merging them into one datacube, we need to rename the bands of the images, because otherwise, ")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# they would be overwritten in the merging process.  ")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# Therefore, we rename the bands of the datacubes using the `rename_labels` process to "R", "G" and "B".')]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# After that we merge them into the "RGB" datacube, which has now three bands ("R", "G" and "B")')]),t._v("\n\nR_band "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" mean_march"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("rename_labels"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dimension"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bands"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" target"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"R"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nG_band "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" mean_april"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("rename_labels"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dimension"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bands"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" target"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"G"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nB_band "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" mean_may"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("rename_labels"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dimension"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bands"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" target"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"B"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nRG "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" R_band"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("merge"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("G_band"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nRGB "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" RG"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("merge"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("B_band"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Last but not least, we add the process to save the result of the processing. There we define that ")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# the result should be a GeoTiff file.")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# We also set, which band should be used for "red", "green" and "blue" color in the options.')]),t._v("\n\nRGB "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" RGB"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("save_result"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("format")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"GTIFF-THUMB"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# With the last process we have finished the datacube definition and can create and start the job at the back-end.")]),t._v("\n\njob "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" RGB"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("send_job"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\njob"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("start_and_wait"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("download_results"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),n("p",[t._v("Now the resulting GTiff file of the RGB backscatter composite is in your current directory.")]),t._v(" "),n("p",[n("img",{attrs:{src:a(163),alt:"RGB composite"}})]),t._v(" "),n("p",[t._v("The "),n("a",{attrs:{href:"https://github.com/Open-EO/openeo-python-client/blob/c21b928ab5f4b4561bb07b7c4a934f0ea9b4f0b8/examples/gee_uc1_temp.py",target:"_blank",rel:"noopener noreferrer"}},[t._v("source code"),n("OutboundLink")],1),t._v(" of this example can be found on GitHub.")]),t._v(" "),n("h2",{attrs:{id:"user-defined-functions"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#user-defined-functions"}},[t._v("#")]),t._v(" User Defined Functions")]),t._v(" "),n("p",[t._v("If your use case can not be accomplished with the "),n("RouterLink",{attrs:{to:"/documentation/1.0/processes.html"}},[t._v("default processes")]),t._v(" of openEO, you can define a "),n("RouterLink",{attrs:{to:"/documentation/1.0/glossary.html#user-defined-function-udf"}},[t._v("user defined function")]),t._v(".\nTherefore, you can create a Python function that will be executed at the back-end and functions as a process in your process graph.")],1),t._v(" "),n("p",[t._v("Detailed information about Python UDFs can be found in the "),n("a",{attrs:{href:"https://open-eo.github.io/openeo-python-client/udf.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("official documentation"),n("OutboundLink")],1),t._v(" as well as examples in the "),n("a",{attrs:{href:"https://github.com/Open-EO/openeo-python-client/tree/master/examples/udf",target:"_blank",rel:"noopener noreferrer"}},[t._v("Python client repository"),n("OutboundLink")],1),t._v(".")]),t._v(" "),n("h2",{attrs:{id:"additional-information"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#additional-information"}},[t._v("#")]),t._v(" Additional Information")]),t._v(" "),n("p",[t._v("Additional information and resources about the openEO Python Client Library:")]),t._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"https://github.com/Open-EO/openeo-python-client/tree/master/examples",target:"_blank",rel:"noopener noreferrer"}},[t._v("Example scripts"),n("OutboundLink")],1)]),t._v(" "),n("li",[n("a",{attrs:{href:"https://github.com/Open-EO/openeo-python-client/tree/master/examples/notebooks",target:"_blank",rel:"noopener noreferrer"}},[t._v("Example Jupyter Notebooks"),n("OutboundLink")],1)]),t._v(" "),n("li",[n("a",{attrs:{href:"https://open-eo.github.io/openeo-python-client/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Official openEO Python Client Library Documentation"),n("OutboundLink")],1)]),t._v(" "),n("li",[n("a",{attrs:{href:"https://github.com/Open-EO/openeo-python-client",target:"_blank",rel:"noopener noreferrer"}},[t._v("Repository on GitHub"),n("OutboundLink")],1)])])])}),[],!1,null,null,null);e.default=s.exports}}]);